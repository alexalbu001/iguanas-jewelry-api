basePath: /api/v1
definitions:
  handlers.AddShippingInfoToOrder:
    properties:
      address_line1:
        type: string
      address_line2:
        description: Optional
        type: string
      city:
        type: string
      country:
        type: string
      email:
        type: string
      name:
        maxLength: 200
        type: string
      phone:
        type: string
      postal_code:
        type: string
      state:
        type: string
    required:
    - address_line1
    - city
    - country
    - email
    - name
    - phone
    - postal_code
    - state
    type: object
  handlers.AddToCartRequest:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  handlers.QuantityRequest:
    properties:
      quantity:
        minimum: 0
        type: integer
    type: object
  models.Product:
    properties:
      category:
        enum:
        - rings
        - earrings
        - bracelets
        - necklaces
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        maxLength: 500
        type: string
      id:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      price:
        type: number
      stock_quantity:
        type: integer
      updated_at:
        type: string
    required:
    - category
    - name
    - price
    type: object
  models.ProductImage:
    properties:
      created_at:
        type: string
      display_order:
        type: integer
      id:
        type: string
      image_url:
        type: string
      is_main:
        type: boolean
      product_id:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      googleid:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      code:
        example: PRODUCT_NOT_FOUND
        type: string
      details:
        additionalProperties: true
        type: object
      message:
        example: Product not found
        type: string
    type: object
  responses.ProductDetailResponse:
    properties:
      category:
        enum:
        - rings
        - earrings
        - bracelets
        - necklaces
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        maxLength: 500
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/models.ProductImage'
        type: array
      name:
        maxLength: 100
        minLength: 1
        type: string
      price:
        type: number
      stock_quantity:
        type: integer
      updated_at:
        type: string
    required:
    - category
    - name
    - price
    type: object
  responses.ProductListResponse:
    properties:
      category:
        enum:
        - rings
        - earrings
        - bracelets
        - necklaces
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        maxLength: 500
        type: string
      id:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      price:
        type: number
      primary_image_url:
        type: string
      stock_quantity:
        type: integer
      updated_at:
        type: string
    required:
    - category
    - name
    - price
    type: object
  service.OrderItemSummary:
    properties:
      id:
        type: string
      price:
        type: number
      product_id:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
      subtotal:
        type: number
    type: object
  service.OrderSummary:
    properties:
      created_at:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/service.OrderItemSummary'
        type: array
      shipping_address:
        $ref: '#/definitions/service.ShippingAddress'
      shipping_name:
        type: string
      status:
        type: string
      total_amount:
        type: number
      user_id:
        type: string
    type: object
  service.ShippingAddress:
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      city:
        type: string
      country:
        type: string
      email:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      state:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A jewelry e-commerce API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Iguanas Jewelry API
  version: "1.0"
paths:
  /api/v1/admin/orders:
    get:
      description: Retrieves all orders in the system (admin access required)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.OrderSummary'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all orders (Admin only)
      tags:
      - orders
  /api/v1/admin/orders/{id}/status:
    put:
      description: Updates the status of a specific order (admin access required)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: New order status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update order status (Admin only)
      tags:
      - orders
  /api/v1/admin/products:
    post:
      consumes:
      - application/json
      description: Creates a product based on json input
      parameters:
      - description: Product information
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Post a Product
      tags:
      - products
  /api/v1/admin/products/{id}:
    delete:
      description: Remove a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Remove a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product information to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Change a product
      tags:
      - products
  /api/v1/admin/products/{id}/images:
    post:
      consumes:
      - application/json
      description: Add a new image to a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product image information
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/models.ProductImage'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductImage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Add product image
      tags:
      - product-images
  /api/v1/admin/products/{id}/images/{imageID}:
    delete:
      description: Remove an image from a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        in: path
        name: imageID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Remove product image
      tags:
      - product-images
    put:
      description: Set an image as the primary image for a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        in: path
        name: imageID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Set primary image
      tags:
      - product-images
  /api/v1/admin/products/{id}/images/reorder:
    put:
      consumes:
      - application/json
      description: Change the order of images for a product (Admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Array of image IDs in desired order
        in: body
        name: imageOrder
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Reorder product images
      tags:
      - product-images
  /api/v1/admin/users:
    get:
      description: Fetches all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get a list of all users
      tags:
      - users
  /api/v1/admin/users/{id}:
    delete:
      description: Removes a user from the system
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Retrieves a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User information to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update user by ID
      tags:
      - users
  /api/v1/admin/users/{id}/role:
    put:
      consumes:
      - application/json
      description: Updates a user's role (admin or customer)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update request
        in: body
        name: roleUpdate
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update user role
      tags:
      - users
  /api/v1/cart:
    delete:
      description: Removes all items from the user's cart
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Clear cart
      tags:
      - carts
    get:
      description: Retrieves the current user's cart with all items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user cart
      tags:
      - carts
    post:
      consumes:
      - application/json
      description: Adds a product to the user's cart with specified quantity
      parameters:
      - description: Add to cart request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Add item to cart
      tags:
      - carts
  /api/v1/cart/items/{id}:
    delete:
      description: Removes a specific item from the user's cart
      parameters:
      - description: Cart item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Remove item from cart
      tags:
      - carts
    put:
      consumes:
      - application/json
      description: Updates the quantity of a specific item in the user's cart
      parameters:
      - description: Cart item ID
        in: path
        name: id
        required: true
        type: string
      - description: Quantity update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.QuantityRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update cart item quantity
      tags:
      - carts
  /api/v1/orders:
    get:
      description: Retrieves the order history for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.OrderSummary'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: View order history
      tags:
      - orders
  /api/v1/orders/{id}:
    get:
      description: Retrieves detailed information about a specific order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.OrderSummary'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get order information
      tags:
      - orders
  /api/v1/orders/{id}/cancel:
    put:
      description: Cancels a specific order for the authenticated user
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Cancel order
      tags:
      - orders
  /api/v1/orders/checkout:
    post:
      consumes:
      - application/json
      description: Creates a new order from the user's cart with shipping information
      parameters:
      - description: Shipping information for the order
        in: body
        name: shippingInfo
        required: true
        schema:
          $ref: '#/definitions/handlers.AddShippingInfoToOrder'
      produces:
      - application/json
      responses:
        "200":
          description: Order created with payment intent
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create order from cart
      tags:
      - orders
  /api/v1/orders/status:
    get:
      description: Retrieves orders filtered by status (admin access required)
      parameters:
      - description: Order status filter
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.OrderSummary'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get orders by status
      tags:
      - orders
  /api/v1/payment/intents/{order_id}:
    post:
      description: Retries payment for a failed order by creating a new payment intent
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Payment intent created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retry order payment
      tags:
      - payments
  /api/v1/products:
    get:
      description: Retrieves a list of all available products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.ProductListResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Fetch all products
      tags:
      - products
  /api/v1/products/{id}:
    get:
      description: Retrieve a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ProductDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Show a product
      tags:
      - products
  /api/v1/user-favorites:
    delete:
      description: Remove all products from the current user's favorites
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Clear user favorites
      tags:
      - user-favorites
    get:
      description: Retrieves the current user's favorites
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user favorites
      tags:
      - user-favorites
  /api/v1/user-favorites/{id}:
    delete:
      description: Remove a product from the current user's favorites
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Remove user favorite
      tags:
      - user-favorites
    post:
      description: Add a product to the current user's favorites
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Add user favorite
      tags:
      - user-favorites
  /api/v1/user/account:
    delete:
      description: Allows authenticated users to delete their own account
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete my account
      tags:
      - users
  /api/v1/user/profile:
    get:
      description: Retrieves the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get my profile
      tags:
      - users
  /webhooks/stripe:
    post:
      consumes:
      - application/json
      description: Processes Stripe webhook events for payment status updates
      parameters:
      - description: Stripe webhook signature
        in: header
        name: stripe-signature
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Webhook processed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Handle Stripe webhook
      tags:
      - payments
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
